name: Buildalon Unity Build
on:
  workflow_dispatch:
    inputs:
      clean:
        description: 'Cleans the library folder and deletes cached items'
        required: false
        default: false
        type: 'boolean'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{(github.event_name == 'pull_request' || github.event.action == 'synchronize')}}
jobs:
  build:
    name: (${{ matrix.os }}) ${{ matrix.build-target }}
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
    env:
      UNITY_PROJECT_PATH: 'Unity'
    runs-on: self-hosted
    strategy:
      matrix:
        include:
          - os: windows-latest
            build-target: StandaloneWindows64
            build-args: ''
    steps:
      - uses: actions/checkout@v4
        with:
          clean: ${{ github.event.inputs.clean == 'true' }}
          lfs: true
          submodules: 'recursive'
      - uses: buildalon/unity-setup@v1
        with:
          build-targets: '${{ matrix.build-target }}'
      - uses: buildalon/activate-unity-license@v1
        with:
          license: 'Personal'
          username: '${{ secrets.UNITY_USERNAME }}'
          password: '${{ secrets.UNITY_PASSWORD }}'
      - name: Add Build Pipeline Package
        working-directory: ${{ env.UNITY_PROJECT_PATH }}
        run: |
          npm install -g openupm-cli
          openupm add com.virtualmaker.buildalon
      - uses: buildalon/unity-action@v1
        name: Project Validation
        with:
          log-name: 'project-validation'
          build-target: '${{ matrix.build-target }}'
          args: '-quit -batchmode -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject'
      - uses: buildalon/unity-action@v1
        name: '${{ matrix.build-target }}-Build'
        with:
          log-name: '${{ matrix.build-target }}-Build'
          build-target: '${{ matrix.build-target }}'
          args: '-quit -batchmode -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild${{ matrix.build-args }}'
      - uses: actions/upload-artifact@v4
        id: upload-artifact
        name: 'Upload ${{ matrix.build-target }} Artifacts'
        if: success() || failure()
        with:
          compression-level: 0
          retention-days: 1
          name: '${{ github.run_number }}.${{ github.run_attempt }}-${{ matrix.os }}-${{ matrix.build-target }}-Artifacts'
          path: |
            ${{ github.workspace }}/**/*.log
            ${{ env.UNITY_PROJECT_PATH }}/Builds/windows/**/*.exe
            ${{ env.UNITY_PROJECT_PATH }}/Builds/windows/**/*.dll
            ${{ env.UNITY_PROJECT_PATH }}/Builds/windows/**/*_Data
            ${{ env.UNITY_PROJECT_PATH }}/Builds/windows/MonoBleedingEdge/
      - name: Clean Artifacts
        if: always()
        shell: bash
        continue-on-error: true
        run: |
          set -xe
          echo "Cleaning logs..."
          logs=$(find "${{ github.workspace }}" -type f -name "*.log")
          echo "Found $(echo "$logs" | grep -v '^[[:space:]]*$' | wc -l) log files."
          for log in $logs; do
            if [ ! -s "$log" ]; then
              continue
            fi
            echo "$log"
            rm -f "$log" || echo "::warning::Failed to delete log file: $log"
          done

          clean='${{ github.event.inputs.clean }}'
          if [ "$clean" == 'true' ]; then
            echo "Cleaning build artifacts..."
            artifacts="${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}"
            echo "Build artifacts path $artifacts"
            if [ -d "$artifacts" ]; then
              items=$(find "$artifacts" -type f)
              echo "Found artifacts folder with $(echo "$items" | grep -v '^[[:space:]]*$' | wc -l) items."
              for item in $items; do
                if [ ! -s "$item" ]; then
                  continue
                fi
                echo "$item"
                rm -rf "$item" || echo "::warning::Failed to delete artifacts folder file: $item"
              done
            else
              echo "Artifacts folder not found."
            fi
            rm -rf "${artifacts}" || echo "::warning::Failed to delete artifacts folder: $artifacts"
          fi

          find "${{ env.UNITY_PROJECT_PATH }}" -type d -empty -delete || echo "::warning::Failed to delete some empty directories"
