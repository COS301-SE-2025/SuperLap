name: Python Linting

on:
  pull_request:
    branches: [main, dev]

permissions:
  contents: write
  pull-requests: write

jobs:
  run-linters:
    name: Run linters
    runs-on: self-hosted

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Python linting with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 Backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 Backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Auto-format Python code with black
        run: |
          black Backend/

      - name: Auto-sort imports with isort
        run: |
          isort Backend/

      - name: Commit formatting changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Backend/
          if ! git diff --staged --quiet; then
            git commit -m "Auto-format Python code with black and isort"
            # Only push in real GitHub Actions environment, not in act
            if [ "$GITHUB_ACTIONS" = "true" ]; then
              # Push to the current branch (handles detached HEAD in GitHub Actions)
              git pull --rebase origin ${{ github.head_ref || github.ref_name }}
              git push origin HEAD:${{ github.head_ref || github.ref_name }}
            else
              echo "Skipping push in local test environment"
            fi
          else
            echo "No formatting changes to commit"
          fi